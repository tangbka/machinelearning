qplot(qsec, mpg, data=mtcars)
qplot(drat, mpg, data=mtcars)
a=lm(mgp ~ ., data=mtcars)
a=lm(mpg ~ ., data=mtcars)
plota
plot(a)
plot(a)
a
vif(a)
require(stats)
vif(a)
install.packages("VIF")
require(vif)
require(VIF)
vif(a)
a
vif(a)
vif(a)
class(mtcars)
dimension(name(mtcars))
dim(name(mtcars))
class(names(mtcars)
)
class(names(mtcars[1:5]))
class(names(mtcars[5]))
names(mtcars)
names(mtcars[,1])
class(mtcars[,1]))
class(mtcars[,1])
class(mtcars[,2])
class(mtcars[,1:6])
class(mtcars[,3])
class(mtcars[,4])
class(mtcars[,5])
class(mtcars[,6])
class(mtcars[,7])
class(mtcars[,8])
class(mtcars[,9])
plot(a)
?update
fit <- lm(mpg ~ ., data = mtcars)
fit1 <- lm(mpg ~ am, data = mtcars)
fit2 <- update(fit, mpg ~ am + hp)
fit3 <- update(fit, mpg ~ am + hp + wt)
anova(fit1, fit2, fit3)
?anova
fit <- lm(mpg ~ ., data = mtcars)
fit1 <- lm(mpg ~ am, data = mtcars)
fit2 <- update(fit, mpg ~ am + hp)
fit3 <- update(fit, mpg ~ am + hp + wt)
fit4 <- update(fit, mpg ~ am + hp + wt + drat)
anova(fit1, fit2, fit3, fit4)
fit5 <- update(fit, mpg ~ am + hp + wt + drat + gear)
fit5 <- update(fit, mpg ~ am + hp + wt + drat + gear)
anova(fit1, fit2, fit3, fit4, fit5)
fit4 <- update(fit, mpg ~ am + hp + wt + gear)
fit5 <- update(fit, mpg ~ am + hp + wt + drat + gear)
anova(fit1, fit2, fit3, fit4, fit5)
fit4 <- update(fit, mpg ~ am + hp + wt + cyl)
anova(fit1, fit2, fit3, fit4)
fit4 <- update(fit, mpg ~ am + hp + wt + disp)
anova(fit1, fit2, fit3, fit4)
fit1 <- lm(mpg ~ am, data = mtcars)
fit2 <- update(fit, mpg ~ am + hp)
fit3 <- update(fit, mpg ~ am + hp + wt)
fit4 <- update(fit, mpg ~ am + hp + wt + carb)
anova(fit1, fit2, fit3, fit4)
fit <- lm(mpg ~ ., data = mtcars)
fit1 <- lm(mpg ~ am, data = mtcars)
fit2 <- update(fit, mpg ~ am + hp)
fit3 <- update(fit, mpg ~ am + hp + wt)
fit4 <- update(fit, mpg ~ am + hp + wt + drat)
fit5 <- update(fit, mpg ~ am + hp + wt + drat + gear)
anova(fit1, fit2, fit3, fit4, fit5)
fit
plot(predict(fit), resid(fit))
plot(predict(fit), resid(fit), pch=".")
plot(predict(fit), resid(fit), color=red)
plot(predict(fit), resid(fit), color="red")
plot(predict(fit), resid(fit), colour="red")
?plot
plot(predict(fit), resid(fit), col="red")
plot(predict(fit), resid(fit), col="red", pch=23)
plot(predict(fit), resid(fit), col="red", pch=2)
plot(predict(fit), resid(fit), col="red", pch=3)
plot(predict(fit), resid(fit), col="red", pch=4)
plot(predict(fit), resid(fit), col="red", pch=7)
plot(predict(fit), resid(fit), col="red", pch=8)
plot(predict(fit), resid(fit), col="red", pch=9)
plot(predict(fit), resid(fit), col="red", pch=10)
plot(predict(fit), resid(fit), col="red", pch=11)
plot(predict(fit), resid(fit), col="red", pch=12)
plot(predict(fit), resid(fit), col="red", pch=13)
plot(predict(fit), resid(fit), col="red", pch=14)
plot(predict(fit), resid(fit), col="red", pch=21)
plot(predict(fit), resid(fit), col="red", pch=20)
plot(predict(fit), resid(fit), col="red", pch=20, main="Plot of residuals against predicted y values")
plot(predict(fit3), resid(fit3), col="red", pch=20, main="Plot of residuals against fitted y values")
round(hatvalues(fit3))
round(dfbetas(fit2)[1 : 10, 2], 3)
round(dfbetas(fit3)[1 : 15, 2], 3)
dfbetas(fit3)
round(dfbetas(fit3)[1 : 10,], 3)
fit <- lm(mpg ~ ., data = mtcars)
fit1 <- lm(mpg ~ am, data = mtcars)
fit2 <- update(fit, mpg ~ am + hp)
fit3 <- update(fit, mpg ~ am + hp + wt)
round(dfbetas(fit3)[1 : 10,], 3)
round(dfbetas(fit3), 3)
round(hatvalues(fit3)[1 : 6], 3)
round(hatvalues(fit3), 3)
plot(fit3)
round(dfbetas(fit3), 3)
round(hatvalues(fit3), 3)
summary(fit3)$coef
summary(fit3)$coefficient
summary(fit3)$coef
summary(fit3)
fit9=lm(mpg~am,data=mtcars)
summary(fit9)
fit9=lm(mpg~am+hp,data=mtcars)
summary(fit9)
fit9=lm(mpg~am+hp+wt,data=mtcars)
summary(fit9)
fit9=lm(mpg~am+hp+drat,data=mtcars)
summary(fit9)
fit9=lm(mpg~am+hp+gear,data=mtcars)
summary(fit9)
fit9=lm(mpg~am+hp+qsec,data=mtcars)
summary(fit9)
fit9=lm(mpg~am+hp+I(am*wt),data=mtcars)
summary(fit9)
fit <- lm(mpg ~ ., data = mtcars)
fit1 <- lm(mpg ~ factor(am), data = mtcars)
fit2 <- update(fit, mpg ~ factor(am) + hp)
fit3 <- update(fit, mpg ~ factor(am) + hp + wt)
fit4 <- update(fit, mpg ~ factor(am) + hp + wt + drat)
fit5 <- update(fit, mpg ~ factor(am) + hp + wt + drat + gear)
anova(fit1, fit2, fit3, fit4, fit5)
summary(fit3)$coef
plot(predict(fit3), resid(fit3), col="red", pch=20, main="Plot of residuals against fitted y values")
mtcars
fit <- lm(mpg ~ ., data = mtcars)
fit1 <- lm(mpg ~ factor(am), data = mtcars)
fit2 <- update(fit, mpg ~ factor(am) + hp)
fit3 <- update(fit, mpg ~ factor(am) + hp + wt)
fit4 <- update(fit, mpg ~ factor(am) + hp + wt + drat)
fit5 <- update(fit, mpg ~ factor(am) + hp + wt + drat + factor(gear)
anova(fit1, fit2, fit3, fit4, fit5)
fit5 <- update(fit, mpg ~ factor(am) + hp + wt + drat + factor(gear))
anova(fit1, fit2, fit3, fit4, fit5)
summary(fit3)$coef
summary(fit2)
summary(fit3)
summary(fit4)
summary(fit5)
summary(fit2)
plot(predict(fit2), resid(fit2), col="red", pch=20, main="Plot of residuals against fitted y values")
round(dfbetas(fit2), 3)
round(hatvalues(fit2), 3)
plot(fit2)
summary(fit2)$coef
$$ MPG = 26.58 + 5.277am - 0.05889hp $$
?mtcars
summary(fit2)
fit <- lm(mpg ~ ., data = mtcars)
fit1 <- lm(mpg ~ factor(am), data = mtcars)
fit2 <- update(fit, mpg ~ factor(am) + hp)
fit3 <- update(fit, mpg ~ factor(am) + hp + wt)
fit4 <- update(fit, mpg ~ factor(am) + hp + wt + drat)
summary(anova(fit1, fit2, fit3, fit4))
shuttle
data(mass)
mass
require(MASS)
shuttle
?shuttle
a=shuttle
InsectSpray
InsectSprays
glm
?glm
head(InsectSprays)
glm(count~spray, data=InsectSprays, family="poisson")
glm(count~factor(spray), data=InsectSprays, family="poisson")
glm(count~factor(spray), data=InsectSprays, family="poisson")
=0.05588/2.67415
0.05588/2.67415
a
a$use = {}
a$use = {}
a$use = {
if "auto" 1
a$use = if {
head(a)
a
shuttle
a=shuttle
glm(factor(use)~wind, data=shuttle, family="binomial")
head(a)
b=subset(a, wind="head")
b
a
b=subset(a, wind=="head")
b
glm(factor(use)~wind, data=b, family="binomial")
b=subset(a, wind="head")
glm(factor(use)~wind, data=shuttle, family="binomial")
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
require(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child~parent,galton)
plot(jitter(child,4)~parent,galton)
regrline <- lm(child~parent,galton)
abline(regrline, lwd=3, col="red")
summary(regrline)
lm(child~parent,galton)
fit <- lm(child~parent, galton)
fit$residuals
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est)
varEst <- var(est(galton$parent))
varEst <- var(fit)
est
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, sum(varRes, varEst))
all.equal(varChild, varRes+varEst)
efit <- elm(accel~ mag+dist, attenu)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(fit$resid, attenu$mag)
cov(fit$residuals, attenu$mag)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor,gpa_nor)
l_nor <- lm(gch_nor~gpa_nor)
fit <- lm(child~parent,data=galton)
fit <- lm(child~parent,galton)
data(galton)
fit <- lm(child~parent,galton)
bye
swirl
swirl()
fit <- lm(child ~ parent, galton)
sum((fit$residuals)^2)/926
sqrt(sum((fit$residuals)^2)/926)
sqrt(sum((fit$residuals)^2)/(n-2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu = mean(galton$child)
mu <- mean(galton$child)
STot <- sum((galton$child-mu)^2)
sTot <- sum((galton$child-mu)^2)
sRes <- sum((fit$residuals)C^2)
sRes <- sum((fit$residuals)^2)
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(galton$child, galton$parent)^2
require(AppliedPredictiveModeling)
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
require(caret)
install.package("caret")
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(galton)
rm(galton)
rm(STot)
rm(fit)
rm(mu)
rm(n)
rm(sRes)
rm(sTot)
View(concrete)
?hist
hist(concrete$SUperPlsticizer)
hist(1, concrete$SUperPlsticizer)
concreate
concrete
head(concrete)
levels(concrete$Superplasticizer)
min(concrete$Superplasticizer)
max(concrete$Superplasticizer)
hist(concrete$Superplasticizer)
hist(log(concrete$Superplasticizer)
)
hist(log(concrete$Superplasticizer))
hist(concrete$Superplasticizer)
hist(log(concrete$Superplasticizer+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
names(training)
which(names(training)%in%"IL")
which(names(training) %in% "IL")
which("IL" %in% names(training))
names(training)
training1 <- training[,c(58:69)]
head(training1)
?preProcess
d <- preProcess(training1, method="pca")
d
names(training)
training1 <- training[,c(1,58:69)]
preComp(training1$diagnosis)
prComp(training1$diagnosis)
prcomp(training1$diagnosis)
prcomp(training1)
training1
head(training1)
modelFit <- train(training1$diagnosis ~ .,method="glm",data=training1)
library(e1071)
install.packages("e1071")
modelFit <- train(training1$diagnosis ~ .,method="glm",data=training1)
testing1 <- testing[,c(1,58:69)]
confusionMatrix(testing1$diagnosis,predict(modelFit,testing1))
preProc <- preProcess(training1, method="pca")
training1
head(training1)
preProc <- preProcess(training1[,-1], method="pca")
trainPC <- predict(preProc,training1[,-58])
preProc <- preProcess(training1[,-1], method="pca", thresh=0.8)
preProc
trainPC <- predict(preProc, training1[,-1])
trainPC
modelFit <- train(training1$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing1[,-1])
confusionMatrix(testing1$diagnosis,predict(modelFit,testPC))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
training1<-training[,c(1,58:69)]
testing1<-testing[,c(1,58:69)]
pp<-preProcess(training1[,-1],method="pca", thresh=0.9)
pp
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training1 <- training[,c(1,58:69)]
head(training1)
testing1 <- testing[,c(1,58:69)]
preProc <- preProcess(training1[,-1], method="pca",thres=0.8)
preProc
data(AlzheimerDisease)
a=data.frame(diagnosis,predictors)
View(a)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training1=training[,c(1,58:69)]
aaa=preProcess(training1[,-1],method="pca",thresh=0.9)
aaa
folds <- createFolds(y=dat$classe, k=5, list=T)
require(caret)
folds <- createFolds(y=dat$classe, k=5, list=T)
dat <- read.csv("pml-training.csv")
getwd()
setwd("~/Data_Science_Specialization_Alex/8_machine_learning")
dat <- read.csv("pml-training.csv")
folds <- createFolds(y=dat$classe, k=5, list=T)
train1 <- dat[-folds[[1]],]
pairs(train1[c(37:40,160)])
pairs(train1[c(40:45,160)])
names(train1)
names(training1)
names(train1)
View(train1)
Ind <- createDataPartition(y=dat$classe, p=0.75, list=F)
head(Ind)
head(train1,2)
names(train1)
a<-c(8:10, 37:48, 60:68, 84:86, 113:124, 151:159)
a
data.frame(a)
head(train1[data.frame(a),])
as.list(a)
head(train1[,as.list(a)])
head(train1[, as.list(a)])
head(train1[, a])
names(train1)
head(train1[, a])
pp<-preProcess(log10(training[,a]+1),method="pca",thresh=0.9))
pp<-preProcess(log10(training[,a]+1),method="pca",thresh=0.9)
rm(train1)
rm(folds)
training <- dat[Ind,]
var_col <- c(8:10, 37:48, 60:68, 84:86, 113:124, 151:159)
training1 <- training[, var_col]
rm(a)
pp<-preProcess(log10(training[,var_col]+1),method="pca", thresh=0.9))
pp<-preProcess(log10(training[,var_col]+1),method="pca", thresh=0.9)
pp<-preProcess(training[,var_col],method="pca", thresh=0.9)
trainPC <- predict(pp,training[,var_col])
pp
trainPC
b <- createResample(y=dat$classe,times=3,list=TRUE)
b
b[[1]]
rm(b)
rm(training1)
rm(training)
rm(trainPC)
rm(pp)
Ind <- createFolds(y=dat$classe, k=3, list=T)
training <- dat[-Ind[[1]],]
Validating <- dat[Ind[[1]],]
pp <- preProcess(training[,var_col],method="pca", thresh=0.9)
pp
trainPC <- predict(pp,training[,var_col])
modelFit <- train(training$type ~ ., method="glm", data=trainPC)
modelFit <- train(training$classe ~ ., method="glm", data=trainPC)
View(trainPC)
pp <- preProcess(training[,-160],method="pca", thresh=0.9)
pp
pp[1]
pp[2]
pp[3]
pp
modelFit <- train(training$classe ~ ., method="glm", data=trainPC)
modelFit <- train(training[,c(var_col,160)]$classe ~ ., method="glm", data=trainPC)
training=training[,c(var_col,160)]
names(training)
head(training)
modelFit <- train(training$classe ~ ., method="glm", data=trainPC)
training
which(training == NA)
as.NA(training)
is.NA(training)
is.na(training)
any(is.na(training))
?any
dat <- read.csv("pml-training.csv")
Ind <- createFolds(y=dat$classe, k=3, list=T)
training <- dat[-Ind[[1]],]
Validating <- dat[Ind[[1]],]
valid
var_col <- c(8:10, 37:48, 60:68, 84:86, 113:124, 151:160)
training1 <- training[, var_col]
valid1 <- valid[, var_col]
any(is.na(training1))
rm(Validating)
valid <- dat[Ind[[1]],]
valid1 <- valid[, var_col]
any(is.na(valid1))
preProc <- preProcess(training1[,-160],method="pca", thresh=0.9)
preProc <- preProcess(training1[,-160],method="pca", thresh=0.9)
head(training1)
preProc <- preProcess(training1[,-49],method="pca", thresh=0.9)
preProc
trainPC <- predict(preProc,training1[,-49])
modelFit <- train(training1$classe ~ ., method="glm", data=trainPC)
warnings()
rm(modelFit)
modelFit <- train(training1$classe ~ ., method="gbm", data=trainPC)
?gbm
?train
testPC <- predict(preProc,testing[,-49])
testPC <- predict(preProc,valid1[,-49])
confusionMatrix(valid1$classe, predict(modelFit,testPC))
preProc <- preProcess(training1[,-49],method="pca", thresh=0.9)
preProc
preProc <- preProcess(training1[,-49],method="pca", thresh=0.95)
preProc
trainPC <- predict(preProc,training1[,-49])
modelFit2 <- train(training1$classe ~ ., method="rf", data=trainPC)
modelFit2 <- train(training1$classe ~ ., method="rf", data=trainPC)
confusionMatrix(valid1$classe, predict(modelFit,testPC))
modelFit
confusionMatrix(valid1$classe, predict(modelFit,testPC))
